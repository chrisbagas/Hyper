import { type NextPage } from "next"
import Head from "next/head"
import { api } from "../../../utils/api"
import { useRouter } from 'next/router'
import React, { useState } from "react"
import type { CommunityPostStatus } from "@prisma/client"
import { GuideForm } from "../../../components/Guide/GuideForm"
import { GameDashboardNav } from "../../../components/shared/GameDashboard/GameDashboardNav"

const CreateGuides: NextPage = () => {
  const router = useRouter()
  const gameId = router.query.game
  const postMutation = api.guides.create.useMutation()
  const { data: game } = api.games.getById.useQuery({ id: gameId as string })
  const [post, setPost] = useState({
    type: undefined,
    title: "",
    content: "",
    headerType: undefined,
    headerUrl: "",
    tagId: ""
  })
  const [errorMessage, setErrorMessage] = useState('')
  const [success, setSuccess] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)

  const handleChange = (event: React.ChangeEvent<HTMLInputElement|HTMLSelectElement|HTMLTextAreaElement>) => {
    setErrorMessage('')
    const value = event.target.value
    console.log(value)
    setPost({
      ...post,
      [event.target.id]: value,
    })
  }

  const savePost = async (event: React.SyntheticEvent, status: CommunityPostStatus, isPreview: boolean) => {
    event.preventDefault()
    setErrorMessage('')
    setIsSubmitting(true)
    if (!post.type||!post.title||!post.content||!post.headerType||!post.headerUrl){
      setErrorMessage('Please fill in all fields')
      setIsSubmitting(false)
      return
    }
    
    try {
      const result = await postMutation.mutateAsync({
        type: post.type,
        status: status,
        title: post.title,
        content: post.content,
        headerType: post.headerType,
        headerUrl: post.headerUrl,
        gameId: gameId as string,
        tagId: post.tagId as string,
      })

      console.log(result)

      setSuccess(true)
      let redirectTo = `/${gameId}/your-guides`
      if (isPreview){
        redirectTo = `/${gameId}/your-guides/${result.id}`
      }
      setTimeout(() => {
        router.push(redirectTo)
      }, 1000)
    } catch (error) {
      setErrorMessage('Something went wrong! Please try again later')
      setIsSubmitting(false)
      postMutation.reset()
    }
  }

  return (
    <>
      <Head>
        <title>Create Guide</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="pt-16 px-16">
        <GameDashboardNav id={game?.id ?? ''} logoUrl={game?.logoUrl} name={game?.name} page={router.pathname} />
      </div>
      <GuideForm 
        postData={post}
        errorMessage={errorMessage}
        isSuccess={success}
        isSubmitting={isSubmitting}
        onChange={handleChange}
        onSubmit={savePost}
        gameId={gameId as string}
      />
    </>
  )
}

export default CreateGuides
