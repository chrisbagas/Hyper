import { CommunityPostStatus, ContentType } from "@prisma/client";
import { GetServerSideProps, InferGetServerSidePropsType, NextPage } from "next";
import Head from "next/head"
import { GuideContent } from "../../../components/Guide/GuideContent"
import { GuideTopButtonGroup } from "../../../components/Guide/GuideTopButtonGroup"
import { ShareIcon } from "@heroicons/react/24/outline"
import { useRouter } from "next/router";
import { api } from "../../../utils/api";
import { GameDashboardNav } from "../../../components/shared/GameDashboard/GameDashboardNav";
import React, { useState } from "react";
import ErrorPage from 'next/error'
import { ssgPrefetchGuidesContent } from "../../../utils/ssgPrefetch";

export const getServerSideProps: GetServerSideProps = ssgPrefetchGuidesContent
const ShowGuides: NextPage = (props: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  const router = useRouter()
  const gameId = props.gameId
  const postId = props.postId
  const { data, isError, isLoading, error } = api.guides.getPostById.useQuery({ id: postId as string })
  const [isTooltipOpen, setIsTooltipOpen] = useState(false)
  const { data: game } = api.games.getById.useQuery({ id: gameId as string })

  if (isLoading) {
    return <span>Loading...</span>
  }

  if (isError) {
    return <span>Error: {error.message}</span>
  }

  if (data.status === CommunityPostStatus.DRAFT) {
    return <ErrorPage statusCode={404} />
  }

  return (
    <>
      <Head>
        <title>{data.title}</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <GameDashboardNav id={game?.id ?? ''} logoUrl={game?.logoUrl} name={game?.name} page={router.pathname} />

      <GuideTopButtonGroup returnUrl={`/${gameId}/guides`} className="px-16 pb-6">
        <button
          className="flex btn btn-ghost normal-case text-neutral-0 gap-2"
          onClick={() => {
            navigator.clipboard.writeText(`${window.location.host}/${gameId}/guides/${postId}`)
            setIsTooltipOpen(true)
            setTimeout(() => {
              setIsTooltipOpen(false)
            }, 2000)
          }
          }>
          Share This Post <ShareIcon className="w-4" />
        </button>
      </GuideTopButtonGroup>

      <GuideContent
        type={data?.type}
        title={data?.title}
        content={data?.content as string}
        headerType={data?.header?.type as ContentType}
        headerUrl={data?.header?.url as string}
        author={data?.authorName as string}
        authorId={data?.authorId as string}
        postedAt={data?.updatedAt}
      />

      <div className="toast px-16">
        {isTooltipOpen && <div className="alert alert-info shadow-lg">
          <div>
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" className="stroke-current flex-shrink-0 w-6 h-6"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path></svg>
            <span>Copied to clipboard.</span>
          </div>
        </div>}
      </div>

    </>
  )
}

export default ShowGuides
