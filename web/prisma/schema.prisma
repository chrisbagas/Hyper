// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id           String        @id @default(cuid())
  username     String?       @unique
  name         String?
  bio          String?
  profileImage String?
  countryCode  String
  country      Country       @relation(fields: [countryCode], references: [localeCode], onDelete: NoAction)
  accounts     Account[]
  sessions     Session[]
  GameAccount  GameAccount[]
  partyMember  PartyMember?
}

model Country {
  localeCode String @id
  name       String
  user       User[]
}

model Game {
  id           String        @id @default(cuid())
  name         String
  logoUrl      String
  GameAccount  GameAccount[]
  parties      Party[]
}

model GameAccount {
  userId                  String
  gameId                  String
  gameIdentifier          String
  statisticsData          Json?
  statisticsLastUpdatedAt DateTime?
  createdAt               DateTime
  game                    Game      @relation(fields: [gameId], references: [id])
  user                    User      @relation(fields: [userId], references: [id])

  @@id([userId, gameId])
}

model Party {
  id                String           @id @default(cuid())
  gameId            String
  partyTitle        String
  partyType         PartyType?
  partyVisibility   PartyVisibility?
  discordInviteLink String?
  game              Game             @relation(fields: [gameId], references: [id])
  partyMembers      PartyMember[]
}

enum PartyType {
  Competitive
  Casual
}

enum PartyVisibility {
  Public
  Private
}

model PartyMember {
  userId  String           @unique
  partyId String
  gameId  String
  level   PartyMemberLevel
  user    User             @relation(fields: [userId], references: [id])
  party   Party            @relation(fields: [partyId], references: [id])
  
  @@id([userId, gameId])
}

enum PartyMemberLevel {
  member
  leader
}